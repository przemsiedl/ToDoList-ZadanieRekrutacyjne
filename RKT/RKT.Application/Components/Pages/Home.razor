@page "/"
@rendermode InteractiveServer

@inject IToDoItemService ToDoItemService;


<PageTitle>Todo List</PageTitle>
<center>

    <EditForm Model="@EditModel">
        <div class="topBar">
            <button @onclick=@AddNew type="button" class="btn btn-success">Add</button>
            <button @onclick=@Delete type="button" class="btn btn-danger">Delete</button>
            <button @onclick=@ShowAll type="button" class="btn btn-primary">Show All</button>
            <InputDate @bind-Value=@ChoosedDate />
        </div>
        <div>
            <div class="table">
                <table>
                    <thead>
                        <tr>
                            <th></th>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Priority</th>
                            <th>Completed</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in ToDoItems)
                        {
                            <tr>
                                <td>
                                    @if (selectedId == item.Id)
                                    {
                                        <input checked @onchange=@(() => OnSelectionChanged(item)) name="rrr" value="@item.Id" type="radio" />
                                    }
                                    else
                                    {
                                        <input @onchange=@(() => OnSelectionChanged(item)) name="rrr" value="@item.Id" type="radio" />
                                    }
                                </td>

                                <td>@item.Title</td>
                                <td>@item.Date</td>
                                <td><InputCheckbox @bind-Value=@item.Priority readonly /></td>
                                <td><InputCheckbox @bind-Value=@item.Completed readonly /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="edit">
                <label>Title</label> <br />
                <InputText @onfocusout=@Update @bind-Value=@EditModel.Title type="text" /> <br />

                <label>Date</label><br />
                <InputDate @onfocusout=@Update @bind-Value=@EditModel.Date /> <br />

                <button @onclick=@TogglePriority type="button" class="btn btn-block btn-danger">Toggle Priority</button> <br />
                <button @onclick=@ToggleCompleted type="button" class="btn btn-block btn-success">Toggle Completed</button>
            </div>
        </div>

    </EditForm>
</center>

@code {
    ToDoItemDto EditModel { get; set; } = new ToDoItemDto();
    List<ToDoItemDto> ToDoItems { get; set; } = new List<ToDoItemDto>();

    long? selectedId = null;

    DateTime? _choosedValue;
    DateTime? ChoosedDate
    {
        get => _choosedValue;
        set
        {
            _choosedValue = value;
            Refresh();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            ToDoItems = await ToDoItemService.GetAll(ChoosedDate);
        }
        catch (Exception e)
        {

        }
    }

    async Task AddNew()
    {
        try
        {
            EditModel = await ToDoItemService.AddNew(new ToDoItemDto() { Title = "New Item", Date = DateTime.Now.Date });
            ToDoItems = await ToDoItemService.GetAll(ChoosedDate);
            selectedId = null;
        }
        catch (Exception e)
        {

        }
    }

    void OnSelectionChanged(ToDoItemDto toDoItem)
    {
        EditModel = toDoItem;
        selectedId = toDoItem.Id;
    }

    async void Refresh()
    {
        try
        {
            ToDoItems = await ToDoItemService.GetAll(ChoosedDate);
        }
        catch (Exception e)
        {

        }
    }

    async Task Delete()
    {
        try
        {
            await ToDoItemService.Remove(EditModel.Id);
            ToDoItems = await ToDoItemService.GetAll(ChoosedDate);
            selectedId = null;
        }
        catch (Exception e)
        {

        }
    }

    async Task Update()
    {
        try
        {
            await ToDoItemService.Update(EditModel.Id, EditModel);
        }
        catch (Exception e)
        {

        }
    }

    async Task ShowAll()
    {
        try
        {
            ChoosedDate = null;
            ToDoItems = await ToDoItemService.GetAll(ChoosedDate);
        }
        catch (Exception e)
        {

        }
    }

    public async Task TogglePriority()
    {
        try
        {
            EditModel.Priority = !EditModel.Priority;
            await ToDoItemService.Update(EditModel.Id, EditModel);
        }
        catch (Exception e)
        {

        }
    }

    public async Task ToggleCompleted()
    {
        try
        {
            EditModel.Completed = !EditModel.Completed;
            await ToDoItemService.Update(EditModel.Id, EditModel);
        }
        catch (Exception e)
        {

        }

    }
}
